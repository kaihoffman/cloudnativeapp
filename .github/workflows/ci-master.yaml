# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "Continuous Integration - Master/Release"
on:
  push:
    # run on pushes to master or release/*
    branches:
      - master
      - release/*
jobs:
  code-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '5.0.201'
    - name: Go Unit Tests
      timeout-minutes: 10
      run: |
        for SERVICE in "shippingservice" "productcatalogservice"; do
          echo "testing $SERVICE..."
          pushd src/$SERVICE
          go test
          popd
        done
    - name: C# Unit Tests
      timeout-minutes: 10
      run: |
        dotnet test src/cartservice/
  deployment-tests:
    runs-on: ubuntu-latest
    needs: code-tests
    steps:
    - uses: actions/checkout@v2
    - name: Install skaffold
      uses: yokawasa/action-setup-kube-tools@v0.7.1
      with:
        skaffold: '1.31.0'
    - name: Install civo
      uses: civo/action-civo@v1.0.0
      with:
        token: ${{ secrets.CIVO_TOKEN }}
    - name: Save Civo kubeconfig
      run: |
        mkdir $HOME/.kube
        civo kubernetes config onlineboutique-prod > $HOME/.kube/config
    - name: Login to Quay.IO
        uses: docker/login-action@v1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_ROBOT_TOKEN }}
    - name: Build + Deploy PR image
      timeout-minutes: 20
      run: |
        make prod
      env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    - name: Wait For Pods
      timeout-minutes: 20
      run: |
        set -x
        kubectl config set-context --current --namespace=$NAMESPACE
        kubectl wait --for=condition=available --timeout=1000s deployment/redis-cart
        kubectl wait --for=condition=available --timeout=1000s deployment/adservice
        kubectl wait --for=condition=available --timeout=1000s deployment/cartservice
        kubectl wait --for=condition=available --timeout=1000s deployment/checkoutservice
        kubectl wait --for=condition=available --timeout=1000s deployment/currencyservice
        kubectl wait --for=condition=available --timeout=1000s deployment/emailservice
        kubectl wait --for=condition=available --timeout=1000s deployment/frontend
        kubectl wait --for=condition=available --timeout=1000s deployment/loadgenerator
        kubectl wait --for=condition=available --timeout=1000s deployment/paymentservice
        kubectl wait --for=condition=available --timeout=1000s deployment/productcatalogservice
        kubectl wait --for=condition=available --timeout=1000s deployment/recommendationservice
        kubectl wait --for=condition=available --timeout=1000s deployment/shippingservice
    - name: Smoke Test
      timeout-minutes: 5
      run: |
        set -x
        # start fresh loadgenerator pod
        kubectl delete pod -n cnapp-prod -l app=loadgenerator
        # wait for requests to come in
        REQUEST_COUNT="0"
        while [[ "$REQUEST_COUNT"  -lt "50"  ]]; do
            sleep 5
            REQUEST_COUNT=$(kubectl logs -l app=loadgenerator | grep Aggregated | awk '{print $2}')
        done
        # ensure there are no errors hitting endpoints
        ERROR_COUNT=$(kubectl logs -l app=loadgenerator | grep Aggregated | awk '{print $3}' | sed "s/[(][^)]*[)]//g")
        if [[ "$ERROR_COUNT" -gt "0" ]]; then
          exit 1
        fi
